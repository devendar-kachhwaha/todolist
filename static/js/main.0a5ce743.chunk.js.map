{"version":3,"sources":["components/TodoForm.js","components/Todo.js","components/TodoList.js","App.js","reportWebVitals.js","index.js"],"names":["TodoForm","props","useState","input","setInput","inputRef","useRef","useEffect","current","focus","handleSubmit","event","preventDefault","onSubmit","id","Math","floor","random","text","className","placeholder","value","onChange","target","name","ref","onClick","Todo","todos","removeTodo","map","todo","index","TodoList","setTodos","newTodos","newArr","filter","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+NAwCeA,MAtCf,SAAkBC,GACd,MAAyBC,mBAAS,IAAlC,mBAAOC,EAAP,KAAaC,EAAb,KACMC,EAAWC,iBAAO,MAExBC,qBAAU,WACNF,EAASG,QAAQC,WAGrB,IAAMC,EAAe,SAACC,GAClBA,EAAMC,iBAENX,EAAMY,SAAS,CACXC,GAAIC,KAAKC,MAAoB,IAAdD,KAAKE,UACpBC,KAAMf,IAEVC,EAAS,KAOb,OACI,uBAAMS,SAAYH,EAAcS,UAAY,YAA5C,UACI,uBACIC,YAAc,aACdC,MAASlB,EACTmB,SATW,SAACX,GACpBP,EAASO,EAAMY,OAAOF,QASdG,KAAO,OACPC,IAAOpB,EACPc,UAAY,eAEhB,wBAAQO,QAAWhB,EAAcS,UAAY,cAA7C,qB,OCjBGQ,MAdf,YAAmC,IAApBC,EAAmB,EAAnBA,MAAMC,EAAa,EAAbA,WACjB,OAAOD,EAAME,KAAI,SAACC,EAAKC,GAAN,OACb,sBAAKb,UAAY,WAAjB,UACI,8BAAMY,EAAKb,OACX,qBAAKC,UAAY,QAAjB,SACI,cAAC,IAAD,CACIO,QAAW,kBAAIG,EAAWE,EAAKjB,KAC/BK,UAAY,oBALSa,OCwB1BC,MAzBf,WACI,MAAyB/B,mBAAS,IAAlC,mBAAO0B,EAAP,KAAaM,EAAb,KAYA,OACI,qCACI,0DACA,cAAC,EAAD,CAAUrB,SAbF,SAACkB,GACb,IAAMI,EAAQ,sBAAOP,GAAP,CAAaG,IAC3B,OAAOG,EAASC,MAYZ,cAAC,EAAD,CACIP,MAASA,EACTC,WAXO,SAACf,GAChB,IAAMsB,EAAS,YAAIR,GAAOS,QAAO,SAAAN,GAAI,OAAIA,EAAKjB,KAAMA,KACpDoB,EAASE,UCHFE,MARf,WACE,OACE,qBAAKnB,UAAU,WAAf,SACE,cAAC,EAAD,OCMSoB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.0a5ce743.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef} from 'react'\r\n\r\nfunction TodoForm(props) {\r\n    const [input,setInput] = useState('');\r\n    const inputRef = useRef(null);\r\n\r\n    useEffect(()=>{\r\n        inputRef.current.focus();\r\n    });\r\n\r\n    const handleSubmit = (event) =>{\r\n        event.preventDefault();\r\n\r\n        props.onSubmit({\r\n            id: Math.floor(Math.random()*10000),\r\n            text: input\r\n        });\r\n        setInput('');\r\n    };\r\n\r\n    const handleOnchange = (event) => {\r\n        setInput(event.target.value);\r\n    };\r\n\r\n    return (\r\n        <form onSubmit = {handleSubmit} className = 'todo-form'>\r\n            <input \r\n                placeholder = 'Add a item'\r\n                value = {input}\r\n                onChange = {handleOnchange}\r\n                name = 'text'\r\n                ref = {inputRef}\r\n                className = 'todo-input'\r\n            />\r\n            <button onClick = {handleSubmit} className = 'todo-button'>ADD</button>\r\n\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default TodoForm\r\n","import React from 'react';\r\nimport {RiCloseCircleLine} from 'react-icons/ri';\r\n\r\nfunction Todo({todos,removeTodo}) {\r\n    return todos.map((todo,index)=>(\r\n        <div className = 'todo-row' key={index}>\r\n            <div>{todo.text}</div>\r\n            <div className = 'icons'>\r\n                <RiCloseCircleLine\r\n                    onClick = {()=>removeTodo(todo.id)}\r\n                    className = 'delete-icon'    \r\n                />\r\n            </div>\r\n        </div>\r\n    ))\r\n}\r\n\r\nexport default Todo\r\n","import React ,{useState} from 'react'\r\nimport TodoForm from './TodoForm'\r\nimport Todo from './Todo'\r\n\r\nfunction TodoList() {\r\n    const [todos,setTodos] = useState([]);\r\n\r\n    const addTodo = (todo)=>{\r\n        const newTodos = [...todos,todo];\r\n        return setTodos(newTodos);\r\n    };\r\n\r\n    const removeTodo = (id) => {\r\n        const newArr = [...todos].filter(todo => todo.id !==id)\r\n        setTodos(newArr);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <h1>FU*KING TASKS OF THE DAY</h1>\r\n            <TodoForm onSubmit = {addTodo} />\r\n            <Todo \r\n                todos = {todos}\r\n                removeTodo = {removeTodo}\r\n            />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default TodoList\r\n","import './App.css';\nimport TodoList from './components/TodoList'\n\nfunction App() {\n  return (\n    <div className=\"todo-app\">\n      <TodoList />\n    </div>\n  );\n}\n\nexport default App;\n\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}